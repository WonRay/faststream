/*
 * Copyright (c) 2008 Kasper Nielsen.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* 
 * This class was automatically generated by cake.bootstrap.view.GenerateAll 
 * Available in the https://github.com/cakeframework/cake-developers/ project 
 */
package io.faststream.query.db.nodes.view.multimapview;

/**
 * This class has been autogenerated
 *
 * @author Kasper Nielsen
 */
public interface MultimapViewVisitable {

    void accept(MultimapViewVisitor visitor);

    interface MultimapViewVisitor {

        void any(UV_Any node);

        void count(UV_Count node);

        void filter(UV_Filter node);

        void filterNullValues(UV_FilterNullValues node);

        void filterOnKey(UV_FilterOnKey node);

        void filterOnKeyType(UV_FilterOnKeyType node);

        void filterOnValue(UV_FilterOnValue node);

        void filterOnValueType(UV_FilterOnValueType node);

        void head(UV_Head node);

        void isEmpty(UVT_IsEmpty node);

        void keys(UV_Keys node);

        void map(UV_Map node);

        void mapKey(UV_MapKey node);

        void mapValue(UV_MapValue node);

        void one(UV_One node);

        void reduce(UV_Reduce node);

        void size(UVT_Size node);

        void sortedKeysAscending(UV_SortedKeysAscending node);

        void sortedKeys(UV_SortedKeys node);

        void sortedKeysDescending(UV_SortedKeysDescending node);

        void sortedValuesAscending(UV_SortedValuesAscending node);

        void sortedValues(UV_SortedValues node);

        void sortedValuesDescending(UV_SortedValuesDescending node);

        void tail(UV_Tail node);

        void take(UV_Take node);

        void takeValues(UV_TakeValues node);

        void to(UVT_To node);

        void toMultimap(UVT_ToMultimap node);

        void unique(UV_Unique node);

        void values(UV_Values node);
    }
}
