/*
 * Copyright (c) 2008 Kasper Nielsen.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* 
 * This class was automatically generated by cake.bootstrap.view.GenerateAll 
 * Available in the https://github.com/cakeframework/cake-developers/ project 
 */
package io.faststream.query.db.nodes.stream.stream;

/**
 * This class has been autogenerated
 *
 * @author Kasper Nielsen
 */
public interface StreamVisitable {

    void accept(StreamVisitor visitor);

    interface StreamVisitor {

        void allMatch(SOT_AllMatch node);

        void anyMatch(SOT_AnyMatch node);

        void collect(SOT_Collect node);

        void collectSupplier(SOT_CollectSupplier node);

        void count(SOT_Count node);

        void distinct(SO_Distinct node);

        void filter(SO_Filter node);

        void findAny(SOT_FindAny node);

        void findFirst(SOT_FindFirst node);

        void flatMap(SO_FlatMap node);

        void flatMapToDouble(SO_FlatMapToDouble node);

        void flatMapToInt(SO_FlatMapToInt node);

        void flatMapToLong(SO_FlatMapToLong node);

        void forEach(SOT_ForEach node);

        void forEachOrdered(SOT_ForEachOrdered node);

        void iterator(SOT_Iterator node);

        void limit(SO_Limit node);

        void map(SO_Map node);

        void mapToDouble(SO_MapToDouble node);

        void mapToInt(SO_MapToInt node);

        void mapToLong(SO_MapToLong node);

        void maxComparator(SOT_MaxComparator node);

        void minComparator(SOT_MinComparator node);

        void noneMatch(SOT_NoneMatch node);

        void parallel(SO_Parallel node);

        void peek(SO_Peek node);

        void reduce(SOT_Reduce node);

        void reduceCombiner(SOT_ReduceCombiner node);

        void sequential(SO_Sequential node);

        void skip(SO_Skip node);

        void sortedAscending(SO_SortedAscending node);

        void sortedComparator(SO_SortedComparator node);

        void spliterator(SOT_Spliterator node);

        void toArray(SOT_ToArray node);

        void toArrayFunction(SOT_ToArrayFunction node);

        void unordered(SO_Unordered node);
    }
}
