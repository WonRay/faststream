/*
 * Copyright (c) 2008 Kasper Nielsen.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* 
 * This class was automatically generated by cake.bootstrap.view.GenerateAll 
 * Available in the https://github.com/cakeframework/cake-developers/ project 
 */
package io.faststream.query.db.nodes.stream.intstream;

/**
 * This class has been autogenerated
 *
 * @author Kasper Nielsen
 */
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.ObjIntConsumer;
import java.util.function.Supplier;

import io.faststream.query.db.nodes.stream.StreamContext;
import io.faststream.query.db.query.node.QueryOperationNode;
import io.faststream.query.db.query.node.QueryOperationNodeDefinition;
import io.faststream.query.db.query.node.TerminalQueryOperationNode;
import io.faststream.query.db.query.node.defaults.CollectionQueryOperations;

@SuppressWarnings("rawtypes")
public class SIT_Collect extends TerminalQueryOperationNode implements IntStreamVisitable {

    private static final long serialVersionUID = 1L;

    private final Supplier supplier;

    private final ObjIntConsumer objIntConsumer;

    private final BiConsumer biConsumer;

    public SIT_Collect(QueryOperationNode parent, StreamContext context, Supplier supplier, ObjIntConsumer objIntConsumer, BiConsumer biConsumer) {
        super(parent);
        this.supplier = Objects.requireNonNull(supplier, "supplier is null");
        this.objIntConsumer = Objects.requireNonNull(objIntConsumer, "objIntConsumer is null");
        this.biConsumer = Objects.requireNonNull(biConsumer, "biConsumer is null");
        context.consume();
    }

    public QueryOperationNodeDefinition getOperationPackage() {
        return QueryOperationNodeDefinition.create(CollectionQueryOperations.CT_COLLECT_FUSED, "supplier", Supplier.class, "objIntConsumer", ObjIntConsumer.class, "biConsumer", BiConsumer.class);
    }

    public String name() {
        return "collect";
    }

    public int getNodeId() {
        return 33;
    }

    @Override
    public final int getNodeType() {
        return 3;
    }

    public Supplier getSupplier() {
        return supplier;
    }

    public ObjIntConsumer getObjIntConsumer() {
        return objIntConsumer;
    }

    public BiConsumer getBiConsumer() {
        return biConsumer;
    }

    public void accept(IntStreamVisitable.IntStreamVisitor visitor) {
        visitor.collect(this);
    }
}
