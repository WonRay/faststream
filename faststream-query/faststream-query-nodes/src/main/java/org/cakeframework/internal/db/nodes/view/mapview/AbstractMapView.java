/*
 * Copyright (c) 2008 Kasper Nielsen.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* 
 * This class was automatically generated by cake.bootstrap.view.GenerateAll 
 * Available in the https://github.com/cakeframework/cake-developers/ project 
 */
package org.cakeframework.internal.db.nodes.view.mapview;

/**
 * This class has been autogenerated
 *
 * @author Kasper Nielsen
 */
import java.util.Comparator;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.BiPredicate;
import java.util.function.Function;
import java.util.function.Predicate;

import org.cakeframework.internal.db.query.node.QueryOperationNode;
import org.cakeframework.internal.db.query.node.QueryOperationNodeDefinition;
import org.cakeframework.internal.db.query.node.TerminalQueryOperationNodeProcessor;
import org.cakeframework.util.BiComparator;
import org.cakeframework.util.view.CollectionView;
import org.cakeframework.util.view.MapView;
import org.cakeframework.util.view.MultimapView;

@SuppressWarnings({"rawtypes", "unchecked" })
public abstract class AbstractMapView extends QueryOperationNode implements MapView {

    private static final long serialVersionUID = 1L;

    public AbstractMapView(QueryOperationNode previous) {
        super(previous);
    }

    public AbstractMapView(TerminalQueryOperationNodeProcessor processor) {
        super(processor);
    }

    public CollectionView entries() {
        return new MV_Entries(this);
    }

    public MapView filter(BiPredicate biPredicate) {
        return new MV_Filter(this, biPredicate);
    }

    public MapView filterNullValues() {
        return new MV_FilterNullValues(this);
    }

    public MapView filterOnKey(Predicate predicate) {
        return new MV_FilterOnKey(this, predicate);
    }

    public MapView filterOnKeyType(Class type) {
        return new MV_FilterOnKeyType(this, type);
    }

    public MapView filterOnValue(Predicate predicate) {
        return new MV_FilterOnValue(this, predicate);
    }

    public MapView filterOnValueType(Class type) {
        return new MV_FilterOnValueType(this, type);
    }

    public void forEach(BiConsumer biConsumer) {
        new MVT_ForEach(this, biConsumer).process();
    }

    public boolean isEmpty() {
        return (Boolean) new MVT_IsEmpty(this).process();
    }

    public CollectionView keys() {
        return new MV_Keys(this);
    }

    public CollectionView map(BiFunction mapper) {
        return new MV_Map(this, mapper);
    }

    public MultimapView mapKey(Function mapper) {
        return new MV_MapKey(this, mapper);
    }

    public MapView mapValue(Function mapper) {
        return new MV_MapValue(this, mapper);
    }

    public long size() {
        return (Long) new MVT_Size(this).process();
    }

    public MapView sorted(BiComparator biComparator) {
        return new MV_Sorted(this, biComparator);
    }

    public MapView sortedByKey() {
        return new MV_SortedByKeyAscending(this);
    }

    public MapView sortedByKey(Comparator comparator) {
        return new MV_SortedByKey(this, comparator);
    }

    public MapView sortedByKeyDescending() {
        return new MV_SortedByKeyDescending(this);
    }

    public MapView sortedByValue() {
        return new MV_SortedByValueAscending(this);
    }

    public MapView sortedByValue(Comparator comparator) {
        return new MV_SortedByValue(this, comparator);
    }

    public MapView sortedByValueDescending() {
        return new MV_SortedByValueDescending(this);
    }

    public MapView take(long numberOfEntriesToTake) {
        return new MV_Take(this, numberOfEntriesToTake);
    }

    public Object to(Class type) {
        return new MVT_To(this, type).process();
    }

    public Map toMap() {
        return (Map) new MVT_ToMap(this).process();
    }

    public CollectionView values() {
        return new MV_Values(this);
    }

    public static <K, V> MapView<K, V> from(TerminalQueryOperationNodeProcessor processor) {
        return new DefaultMapView(processor);
    }

    static final class DefaultMapView extends AbstractMapView {

        private static final long serialVersionUID = 1L;

        DefaultMapView(TerminalQueryOperationNodeProcessor processor) {
            super(processor);
        }

        public final int getNodeId() {
            return -6;
        }

        @Override
        public final int getNodeType() {
            return 6;
        }

        @Override
        public final String name() {
            return "root";
        }

        @Override
        public final QueryOperationNodeDefinition getOperationPackage() {
            return null;
        }
    }
}
