/*
 * Copyright (c) 2008 Kasper Nielsen.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* 
 * This class was automatically generated by cake.bootstrap.view.GenerateAll 
 * Available in the https://github.com/cakeframework/cake-developers/ project 
 */
package org.cakeframework.internal.db.nodes.view.mapview;

/**
 * This class has been autogenerated
 *
 * @author Kasper Nielsen
 */
public interface MapViewVisitable {

    void accept(MapViewVisitor visitor);

    interface MapViewVisitor {

        void entries(MV_Entries node);

        void filter(MV_Filter node);

        void filterNullValues(MV_FilterNullValues node);

        void filterOnKey(MV_FilterOnKey node);

        void filterOnKeyType(MV_FilterOnKeyType node);

        void filterOnValue(MV_FilterOnValue node);

        void filterOnValueType(MV_FilterOnValueType node);

        void forEach(MVT_ForEach node);

        void isEmpty(MVT_IsEmpty node);

        void keys(MV_Keys node);

        void map(MV_Map node);

        void mapKey(MV_MapKey node);

        void mapValue(MV_MapValue node);

        void size(MVT_Size node);

        void sorted(MV_Sorted node);

        void sortedByKeyAscending(MV_SortedByKeyAscending node);

        void sortedByKey(MV_SortedByKey node);

        void sortedByKeyDescending(MV_SortedByKeyDescending node);

        void sortedByValueAscending(MV_SortedByValueAscending node);

        void sortedByValue(MV_SortedByValue node);

        void sortedByValueDescending(MV_SortedByValueDescending node);

        void take(MV_Take node);

        void to(MVT_To node);

        void toMap(MVT_ToMap node);

        void values(MV_Values node);
    }
}
