/*
 * Copyright (c) 2008 Kasper Nielsen.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* 
 * This class was automatically generated by cake.bootstrap.view.GenerateAll 
 * Available in the https://github.com/cakeframework/cake-developers/ project 
 */
package org.cakeframework.internal.db.nodes.view.multimapview;

/**
 * This class has been autogenerated
 *
 * @author Kasper Nielsen
 */
import java.util.Comparator;
import java.util.function.BiFunction;
import java.util.function.BiPredicate;
import java.util.function.BinaryOperator;
import java.util.function.Function;
import java.util.function.Predicate;

import org.cakeframework.internal.db.query.node.QueryOperationNode;
import org.cakeframework.internal.db.query.node.QueryOperationNodeDefinition;
import org.cakeframework.internal.db.query.node.TerminalQueryOperationNodeProcessor;
import org.cakeframework.util.Multimap;
import org.cakeframework.util.view.CollectionView;
import org.cakeframework.util.view.MapView;
import org.cakeframework.util.view.MultimapView;

@SuppressWarnings({"rawtypes", "unchecked" })
public abstract class AbstractMultimapView extends QueryOperationNode implements MultimapView {

    private static final long serialVersionUID = 1L;

    public AbstractMultimapView(QueryOperationNode previous) {
        super(previous);
    }

    public AbstractMultimapView(TerminalQueryOperationNodeProcessor processor) {
        super(processor);
    }

    public MapView any() {
        return new UV_Any(this);
    }

    public MapView count() {
        return new UV_Count(this);
    }

    public MultimapView filter(BiPredicate biPredicate) {
        return new UV_Filter(this, biPredicate);
    }

    public MultimapView filterNullValues() {
        return new UV_FilterNullValues(this);
    }

    public MultimapView filterOnKey(Predicate predicate) {
        return new UV_FilterOnKey(this, predicate);
    }

    public MultimapView filterOnKeyType(Class type) {
        return new UV_FilterOnKeyType(this, type);
    }

    public MultimapView filterOnValue(Predicate predicate) {
        return new UV_FilterOnValue(this, predicate);
    }

    public MultimapView filterOnValueType(Class type) {
        return new UV_FilterOnValueType(this, type);
    }

    public MapView head() {
        return new UV_Head(this);
    }

    public boolean isEmpty() {
        return (Boolean) new UVT_IsEmpty(this).process();
    }

    public CollectionView keys() {
        return new UV_Keys(this);
    }

    public CollectionView map(BiFunction mapper) {
        return new UV_Map(this, mapper);
    }

    public MultimapView mapKey(Function mapper) {
        return new UV_MapKey(this, mapper);
    }

    public MultimapView mapValue(Function mapper) {
        return new UV_MapValue(this, mapper);
    }

    public MapView one() {
        return new UV_One(this);
    }

    public MapView reduce(BinaryOperator reducer) {
        return new UV_Reduce(this, reducer);
    }

    public long size() {
        return (Long) new UVT_Size(this).process();
    }

    public MultimapView sortedKeys() {
        return new UV_SortedKeysAscending(this);
    }

    public MultimapView sortedKeys(Comparator comparator) {
        return new UV_SortedKeys(this, comparator);
    }

    public MultimapView sortedKeysDescending() {
        return new UV_SortedKeysDescending(this);
    }

    public MultimapView sortedValues() {
        return new UV_SortedValuesAscending(this);
    }

    public MultimapView sortedValues(Comparator comparator) {
        return new UV_SortedValues(this, comparator);
    }

    public MultimapView sortedValuesDescending() {
        return new UV_SortedValuesDescending(this);
    }

    public MapView tail() {
        return new UV_Tail(this);
    }

    public MultimapView take(long numberOfKeysToTake) {
        return new UV_Take(this, numberOfKeysToTake);
    }

    public MultimapView takeValues(long numberOfValuesToTake) {
        return new UV_TakeValues(this, numberOfValuesToTake);
    }

    public Object to(Class type) {
        return new UVT_To(this, type).process();
    }

    public Multimap toMultimap() {
        return (Multimap) new UVT_ToMultimap(this).process();
    }

    public MultimapView unique() {
        return new UV_Unique(this);
    }

    public CollectionView values() {
        return new UV_Values(this);
    }

    public static <K, V> MultimapView<K, V> from(TerminalQueryOperationNodeProcessor processor) {
        return new DefaultMultimapView(processor);
    }

    static final class DefaultMultimapView extends AbstractMultimapView {

        private static final long serialVersionUID = 1L;

        DefaultMultimapView(TerminalQueryOperationNodeProcessor processor) {
            super(processor);
        }

        public final int getNodeId() {
            return -7;
        }

        @Override
        public final int getNodeType() {
            return 7;
        }

        @Override
        public final String name() {
            return "root";
        }

        @Override
        public final QueryOperationNodeDefinition getOperationPackage() {
            return null;
        }
    }
}
