/*
 * Copyright (c) 2008 Kasper Nielsen.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* 
 * This class was automatically generated by cake.bootstrap.view.GenerateAll 
 * Available in the https://github.com/cakeframework/cake-developers/ project 
 */
package org.cakeframework.internal.db.nodes.stream.longstream;

/**
 * This class has been autogenerated
 *
 * @author Kasper Nielsen
 */
public interface LongStreamVisitable {

    void accept(LongStreamVisitor visitor);

    interface LongStreamVisitor {

        void allMatch(SLT_AllMatch node);

        void anyMatch(SLT_AnyMatch node);

        void asDoubleStream(SL_AsDoubleStream node);

        void average(SLT_Average node);

        void boxed(SL_Boxed node);

        void collect(SLT_Collect node);

        void count(SLT_Count node);

        void distinct(SL_Distinct node);

        void filter(SL_Filter node);

        void findAny(SLT_FindAny node);

        void findFirst(SLT_FindFirst node);

        void flatMap(SL_FlatMap node);

        void forEach(SLT_ForEach node);

        void forEachOrdered(SLT_ForEachOrdered node);

        void iterator(SLT_Iterator node);

        void limit(SL_Limit node);

        void map(SL_Map node);

        void mapToDouble(SL_MapToDouble node);

        void mapToInt(SL_MapToInt node);

        void mapToObj(SL_MapToObj node);

        void max(SLT_Max node);

        void min(SLT_Min node);

        void noneMatch(SLT_NoneMatch node);

        void parallel(SL_Parallel node);

        void peek(SL_Peek node);

        void reduce(SLT_Reduce node);

        void sequential(SL_Sequential node);

        void skip(SL_Skip node);

        void sorted(SL_Sorted node);

        void spliterator(SLT_Spliterator node);

        void sum(SLT_Sum node);

        void summaryStatistics(SLT_SummaryStatistics node);

        void toArray(SLT_ToArray node);

        void unordered(SL_Unordered node);
    }
}
